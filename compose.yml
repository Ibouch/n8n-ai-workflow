# ==============================================================================
# N8N PRODUCTION INFRASTRUCTURE - BASE CONFIGURATION
# ==============================================================================
# This file provides the foundational N8N infrastructure setup with core services.
# 
# USAGE OPTIONS:
# 1. Development: docker compose up -d
# 2. Production: docker compose -f compose.yml -f compose.prod.yml up -d
# 
# PRODUCTION NOTES:
# - Use with compose.prod.yml for full monitoring stack and production optimizations
# - Production file extends this base configuration with additional services
# - Environment variables can be customized via .env file
# 
# ==============================================================================
# YAML ANCHORS - Reusable configuration templates
# ==============================================================================

# Security hardening baseline applied to all containers
x-hardening: &hardening
  read_only: true                                   # Immutable root filesystem
  security_opt:
    - no-new-privileges:true                        # Prevent privilege escalation
    - seccomp:./security/seccomp-profile.json       # Restrict system calls
  cap_drop:
    - ALL                                           # Drop all Linux capabilities

# Standardized logging configuration with rotation
x-logging: &logging
  driver: "json-file"
  options:
    max-size: "10m"                                 # Rotate at 10MB
    max-file: "3"                                   # Keep 3 historical files

# Base tmpfs mount for containers requiring temporary storage
x-tmpfs-base: &tmpfs-base
  - /tmp:noexec,nosuid,size=100m

# Resource allocation templates for different service tiers
x-small-resources: &small-resources
  limits:
    cpus: '0.5'
    memory: 1G
  reservations:
    cpus: '0.1'
    memory: 128M

x-medium-resources: &medium-resources
  limits:
    cpus: '1'
    memory: 2G
  reservations:
    cpus: '0.5'
    memory: 512M

x-large-resources: &large-resources
  limits:
    cpus: '2.5'
    memory: 4G
  reservations:
    cpus: '1'
    memory: 1G

services:
  # ==============================================================================
  # DATABASE LAYER
  # ==============================================================================
  
  # PostgreSQL - Primary database for N8N workflows and user data
  postgres:
    <<: *hardening
    image: postgres:alpine
    container_name: n8n-postgres
    restart: unless-stopped
    user: "70:70"
    security_opt:
      - no-new-privileges:true
      - apparmor:n8n_postgres_profile
      - seccomp:./security/seccomp-profile.json
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETGID
      - SETUID
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/run/postgresql:noexec,nosuid,size=100m
      - /dev/shm:size=512m
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-n8n_admin}
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_DB=${POSTGRES_DB:-n8n}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256 --data-checksums
    secrets:
      - postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init:/docker-entrypoint-initdb.d:ro
    networks:
      - n8n-backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-n8n_admin} -d ${POSTGRES_DB:-n8n}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    logging: *logging
    deploy:
      resources: *medium-resources

  # ==============================================================================
  # APPLICATION LAYER
  # ==============================================================================
  
  # N8N - Workflow automation platform and primary application
  n8n:
    <<: *hardening
    image: n8nio/n8n:latest
    container_name: n8n-app
    restart: unless-stopped
    user: "1000:1000"
    security_opt:
      - no-new-privileges:true
      - apparmor:n8n_app_profile
      - seccomp:./security/seccomp-profile.json
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /home/node/.n8n/logs:noexec,nosuid,size=100m
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-n8n}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-n8n_admin}
      - DB_POSTGRESDB_PASSWORD_FILE=/run/secrets/postgres_password
      - DB_POSTGRESDB_SSL_ENABLED=false
      - DB_POSTGRESDB_POOL_SIZE=${DB_POOL_SIZE:-10}
      
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE:-true}
      - N8N_BASIC_AUTH_USER=${N8N_ADMIN_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD_FILE=/run/secrets/n8n_password
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=${N8N_PROTOCOL:-https}
      - WEBHOOK_URL=${WEBHOOK_URL:-https://localhost/}
      - N8N_EDITOR_BASE_URL=${N8N_EDITOR_BASE_URL:-https://localhost/}
      - N8N_ENCRYPTION_KEY_FILE=/run/secrets/n8n_encryption_key
      
      - N8N_SECURE_COOKIE=${N8N_SECURE_COOKIE:-true}
      - N8N_LOG_LEVEL=${N8N_LOG_LEVEL:-info}
      - N8N_HIRING_BANNER_ENABLED=false
      
      - N8N_METRICS=${N8N_METRICS:-true}
      - EXECUTIONS_PROCESS=${EXECUTIONS_PROCESS:-main}
      - EXECUTIONS_MODE=${EXECUTIONS_MODE:-queue}
      - EXECUTIONS_TIMEOUT=${EXECUTIONS_TIMEOUT:-3600}
      - EXECUTIONS_TIMEOUT_MAX=${EXECUTIONS_TIMEOUT_MAX:-7200}
      - EXECUTIONS_DATA_SAVE_ON_ERROR=${EXECUTIONS_DATA_SAVE_ON_ERROR:-all}
      - EXECUTIONS_DATA_SAVE_ON_SUCCESS=${EXECUTIONS_DATA_SAVE_ON_SUCCESS:-all}
      
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_PASSWORD_FILE=/run/secrets/redis_password
      - QUEUE_BULL_REDIS_DB=0
      - QUEUE_RECOVERY_INTERVAL=60
      
      - N8N_VERSION_NOTIFICATIONS_ENABLED=${N8N_VERSION_NOTIFICATIONS_ENABLED:-false}
      - N8N_DIAGNOSTICS_ENABLED=${N8N_DIAGNOSTICS_ENABLED:-false}
      - N8N_PERSONALIZATION_ENABLED=${N8N_PERSONALIZATION_ENABLED:-false}
      
      - N8N_EMAIL_MODE=smtp
      - N8N_SMTP_HOST=${SMTP_HOST:-localhost}
      - N8N_SMTP_PORT=${SMTP_PORT:-587}
      - N8N_SMTP_USER=${SMTP_USERNAME:-}
      - N8N_SMTP_PASS_FILE=/run/secrets/smtp_password
      - N8N_SMTP_SENDER="${SMTP_SENDER_NAME:-N8N System} <${SMTP_FROM:-admin@localhost}>"
      - N8N_SMTP_SSL=${SMTP_SSL:-false}
      - N8N_SMTP_OAUTH_SERVICE_CLIENT=${SMTP_OAUTH_SERVICE_CLIENT:-}
      - N8N_SMTP_OAUTH_PRIVATE_KEY=${SMTP_OAUTH_PRIVATE_KEY:-}
      
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE:-UTC}
      - TZ=${GENERIC_TIMEZONE:-UTC}
    secrets:
      - postgres_password
      - n8n_password
      - n8n_encryption_key
      - smtp_password
      - redis_password
    volumes:
      - n8n_data:/home/node/.n8n
      - ./custom-nodes:/home/node/.n8n/custom:ro
    networks:
      - n8n-backend
      - n8n-frontend
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 120s
    logging: *logging
    deploy:
      resources: *large-resources

  # ==============================================================================
  # REVERSE PROXY & TLS TERMINATION
  # ==============================================================================
  
  # Nginx - Reverse proxy with TLS termination and security headers
  nginx:
    <<: *hardening
    image: nginx:alpine
    container_name: n8n-nginx
    restart: unless-stopped
    user: "101:101"
    security_opt:
      - no-new-privileges:true
      - apparmor:n8n_nginx_profile
      - seccomp:./security/seccomp-profile.json
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/run:noexec,nosuid,size=100m
      - /var/cache/nginx:noexec,nosuid,size=100m
    depends_on:
      n8n:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    networks:
      - n8n-frontend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 60s
      timeout: 5s
      retries: 3
      start_period: 30s
    logging: *logging
    deploy:
      resources: *small-resources

  # ==============================================================================
  # CACHE & SESSION STORAGE
  # ==============================================================================
  
  # Redis - In-memory cache and N8N queue backend
  redis:
    <<: *hardening
    image: redis:alpine
    container_name: n8n-redis
    restart: unless-stopped
    user: "999:999"
    security_opt:
      - no-new-privileges:true
      - apparmor:n8n_redis_profile
      - seccomp:./security/seccomp-profile.json
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /etc/redis:noexec,nosuid,size=10m
    command: >
      sh -c 'printf "requirepass %s\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nsave 60 1000\nappendonly yes\ntcp-keepalive 300\ntimeout 0\n" 
      "$$(cat /run/secrets/redis_password)" > /etc/redis/redis.conf &&
      exec redis-server /etc/redis/redis.conf'
    secrets:
      - redis_password
    volumes:
      - redis_data:/data
    networks:
      - n8n-backend
    healthcheck:
      test: ["CMD-SHELL", "REDISCLI_AUTH=\"$$(cat /run/secrets/redis_password)\" redis-cli ping | grep -q PONG"]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 30s
    logging: *logging
    deploy:
      resources: *small-resources

# ==============================================================================
# NETWORK ARCHITECTURE - Defense-in-depth network security
# ==============================================================================
networks:
  n8n-frontend:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-n8n-front
      com.docker.network.bridge.enable_icc: "false"
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1
  
  n8n-backend:
    driver: bridge
    internal: true
    driver_opts:
      com.docker.network.bridge.name: br-n8n-back
      com.docker.network.bridge.enable_icc: "false"
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/24
          gateway: 172.21.0.1

# ==============================================================================
# PERSISTENT STORAGE - Optimized volumes for performance and security
# ==============================================================================
volumes:
  postgres_data:
    driver: local
  
  n8n_data:
    driver: local
  
  redis_data:
    driver: local
  
  nginx_logs:
    driver: local

# ==============================================================================
# SECRETS MANAGEMENT - File-based Docker secrets for secure credential injection
# ==============================================================================
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  
  n8n_password:
    file: ./secrets/n8n_password.txt
  n8n_encryption_key:
    file: ./secrets/n8n_encryption_key.txt
  smtp_password:
    file: ./secrets/smtp_password.txt
  
  redis_password:
    file: ./secrets/redis_password.txt